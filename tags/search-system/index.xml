<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Search System on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/search-system/</link>
    <description>Recent content in Search System on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Apr 2022 15:56:39 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/search-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>learning System design as a landscape architect 12</title>
      <link>https://rileyshen.github.io/post/sys12/</link>
      <pubDate>Fri, 01 Apr 2022 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/sys12/</guid>
      
        <description>&lt;p&gt;Rethink Location Based Service system design in a much fun way, as a former urban planner/landscape planner. Take Search System as example&lt;/p&gt;
&lt;!-- more --&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#design-search-system&#34; &gt;Design Search System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scenario-analysis&#34; &gt;Scenario analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#functional-requirement&#34; &gt;Functional Requirement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#service&#34; &gt;Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage-system-in-twitter&#34; &gt;Storage system in Twitter&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#database-system&#34; &gt;database system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#searching-database-involvement&#34; &gt;searching database involvement&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#index-file-storage&#34; &gt;Index file storage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#search-engine&#34; &gt;search engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inverted-index&#34; &gt;Inverted Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ranking-search-result&#34; &gt;Ranking search result&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#schema-design&#34; &gt;Schema design&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#create-real_time-index&#34; &gt;create real_time index&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#query-process&#34; &gt;query process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#batch-index-creation-process&#34; &gt;Batch index creation process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tweet-search-vs-e-commerce-search&#34; &gt;tweet search vs e-commerce search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scale&#34; &gt;Scale&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fault-tolerance---replication-mechanism&#34; &gt;Fault Tolerance - Replication Mechanism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;p&gt;System Design = Logic Design(why) + Infrastructure Design(how)&lt;/p&gt;
&lt;h2 id=&#34;design-search-system&#34;&gt;Design Search System&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-design-search-system&#34; name=&#34;design-search-system&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;scenario-analysis&#34;&gt;Scenario analysis&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-scenario-analysis&#34; name=&#34;scenario-analysis&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Take twitter Search System as example.&lt;/p&gt;
&lt;h3 id=&#34;functional-requirement&#34;&gt;Functional Requirement&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-functional-requirement&#34; name=&#34;functional-requirement&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;500 million tweets are posted every day.&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-service&#34; name=&#34;service&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index Service&lt;/li&gt;
&lt;li&gt;Search Service&lt;/li&gt;
&lt;li&gt;Ranking Service&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;storage-system-in-twitter&#34;&gt;Storage system in Twitter&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-storage-system-in-twitter&#34; name=&#34;storage-system-in-twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;Redis Cluster&lt;/code&gt; for caching&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;Blobstore&lt;/code&gt; for large file such as image, video&lt;/li&gt;
&lt;li&gt;Hadoop cluster for backend data, analyzing Server Logs&lt;/li&gt;
&lt;li&gt;MySQL for persistent data&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;database-system&#34;&gt;database system&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-database-system&#34; name=&#34;database-system&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sharding&lt;/li&gt;
&lt;li&gt;Cold and hot data separation&lt;/li&gt;
&lt;li&gt;read-write separation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;searching-database-involvement&#34;&gt;searching database involvement&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-searching-database-involvement&#34; name=&#34;searching-database-involvement&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MySQL database&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the MySQL database, twitter is indexed based on time, which is divided into multiple Timeslice table. Only support 3 days data search.&lt;/p&gt;
&lt;p&gt;However, due to the huge number of tweets, each search only supports three days of all data searches.&lt;/p&gt;
&lt;p&gt;The search methods supported by MySQL search are very limited and difficult to scale&lt;/p&gt;
&lt;p&gt;Searching for a single keyword, does not support searching for multiple keyword combinations, 
filter, fuzzy query, range search&lt;/p&gt;
&lt;p&gt;When the amount of data is too large, the query speed is very slow.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;earlybird &amp;ndash;&amp;gt; Index server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MySQL is only used in Synchronizing , disseminating data, and saving serialized documents&lt;/p&gt;
&lt;h3 id=&#34;index-file-storage&#34;&gt;Index file storage&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-index-file-storage&#34; name=&#34;index-file-storage&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;where is index file store? MySQL , Redis, or HDFS?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HDFS: Build an index on the query content in advance, put it in the index library, and then query from the index library when querying.&lt;/p&gt;
&lt;h4 id=&#34;search-engine&#34;&gt;search engine&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-search-engine&#34; name=&#34;search-engine&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;divide the file into multiple Blocks&lt;/p&gt;
&lt;h4 id=&#34;inverted-index&#34;&gt;Inverted Index&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-inverted-index&#34; name=&#34;inverted-index&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;an inverted index is a database index storing a mapping from content, such as words or numbers, cons: Large storage overhead and high maintenance costs on update, delete and insert.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tokenizer&lt;/code&gt; is used in inverted index&lt;/p&gt;
&lt;h3 id=&#34;ranking-search-result&#34;&gt;Ranking search result&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-ranking-search-result&#34; name=&#34;ranking-search-result&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interactions (Likes, comments, retweets, saved, read)&lt;/li&gt;
&lt;li&gt;connection (Author Credibility, followed or not)&lt;/li&gt;
&lt;li&gt;popularity (realtime + connection + Interactions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;schema-design&#34;&gt;Schema design&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-schema-design&#34; name=&#34;schema-design&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tweet Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_time&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forwarding_times&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;comment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;User Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_superstart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;how to optimize query performance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;real_time index&lt;/p&gt;
&lt;p&gt;Store the latest tweets in the last 1 week to build an index library in memory.
Querying an index from memory is much faster than from disk&lt;/p&gt;
&lt;h3 id=&#34;create-real_time-index&#34;&gt;create real_time index&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-create-real_time-index&#34; name=&#34;create-real_time-index&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;New tweets posted by users will be sent to the word segmentation server. Here the text of the tweets is tokenized&lt;/li&gt;
&lt;li&gt;According to hash segmentation, tweets are distributed to each Earlybird (index server), and each Earlybird (index server) is responsible for a part data, indexing tweets in real time&lt;/li&gt;
&lt;li&gt;At the same time, there is another update service, which pushes the dynamic change information of tweets (for example: the number of likes, the number of retweets), and dynamically updated index&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;tweet&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;MQ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MQ&lt;/code&gt; &amp;ndash;&amp;gt; Tokenizer &amp;ndash;hash&amp;ndash;&amp;gt; EarlyBird(index servers)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MQ&lt;/code&gt; &amp;ndash;&amp;gt; tweet updates&amp;ndash;&amp;gt; &lt;code&gt;Updatas server&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;query-process&#34;&gt;query process&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-query-process&#34; name=&#34;query-process&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;query request
User search request reach Blender (Search front-end server), Blender parses the request&lt;/li&gt;
&lt;li&gt;execute calculation
Earlybird Service executive calculation,and sorted tweet lists, return to Blender&lt;/li&gt;
&lt;li&gt;return result
Blender merges each lists returned by Earlybird table, and perform some heavy sorting, like Reranking, then return to the user&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;How to optimize Query Performance to the next level&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Twitter saves not only the last 1 week tweets and also the 2% most popular and most likely to be queryed
Search tweets in memory and save 16% of tweets on SSD hard drive.&lt;/p&gt;
&lt;h3 id=&#34;batch-index-creation-process&#34;&gt;Batch index creation process&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-batch-index-creation-process&#34; name=&#34;batch-index-creation-process&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;: Join multiple data sources together based on Tweet ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scoring&lt;/strong&gt;: according to the feature extraction of Twitter (number of retweets, number of likes, number of comments, etc.) to score, the higher the score&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partitioned storage&lt;/strong&gt;: divide data into small blocks and store them in HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tweet-search-vs-e-commerce-search&#34;&gt;tweet search vs e-commerce search&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-tweet-search-vs-e-commerce-search&#34; name=&#34;tweet-search-vs-e-commerce-search&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e-commerce search:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Supports all kinds of sorting, including popularity, sales, credit, price or other attributes such as grid, origin, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support range query &amp;ndash;price range search&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support using Attribute to search and filter products&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real time accurate information on inventory and price&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having Accurate Product Data&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Elasticsearch(ES): At present, most search engines used in e-commerce are based on distributed real-time engines&lt;/p&gt;
&lt;h2 id=&#34;scale&#34;&gt;Scale&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-scale&#34; name=&#34;scale&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter Trending&lt;/p&gt;
&lt;p&gt;Twitter&amp;rsquo;s high-concurrency real-time Calculated Trending board, 
cache but not db is the one used to realize this function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis Sorted Set&lt;/strong&gt;  has a weight score to sort from large to small.&lt;/p&gt;
&lt;h3 id=&#34;fault-tolerance---replication-mechanism&#34;&gt;Fault Tolerance - Replication Mechanism&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-fault-tolerance---replication-mechanism&#34; name=&#34;fault-tolerance---replication-mechanism&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;primary shard&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;replica shard&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When data is stored on the primary shard server, it will be synchronized to the backup shard server in real time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When querying, all (primary and standby) are queried&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve the fault tolerance of the system. When a node of a node is damaged or lost, it can recover from the replica, and the node with the primary shard hangs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A replica shard will be promoted to primary shard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve query efficiency: Replica shards also provide query capabilities and automatically load balance search requests.&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>