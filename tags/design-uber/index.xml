<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Uber on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/design-uber/</link>
    <description>Recent content in Design Uber on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Apr 2022 15:56:39 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/design-uber/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>learning System design as a landscape architect 11</title>
      <link>https://rileyshen.github.io/post/sys11/</link>
      <pubDate>Fri, 01 Apr 2022 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/sys11/</guid>
      
        <description>&lt;p&gt;Rethink Location Based Service system design in a much fun way, as a former urban planner/landscape planner. Take Uber as example&lt;/p&gt;
&lt;!-- more --&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#design-uber&#34; &gt;Design UBER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scenario-analysis&#34; &gt;Scenario analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#functional-requirement&#34; &gt;Functional Requirement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34; &gt;data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#service&#34; &gt;Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage&#34; &gt;Storage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#schema&#34; &gt;Schema&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#trip-class&#34; &gt;Trip Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#location-class&#34; &gt;Location Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#save-and-query-location-info&#34; &gt;save and query location info&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#search-for-vehicles-within-a-2km-radius-use-geohash-in-database&#34; &gt;Search for vehicles within a 2km radius use geohash in database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage-geohash&#34; &gt;Storage geohash&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sql&#34; &gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nosql-cassandra&#34; &gt;NoSQL Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nosql-redis&#34; &gt;NoSQL Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nosql-redis-as-database&#34; &gt;NoSQL Redis as database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-flow-between-riders-and-drivers&#34; &gt;data flow between riders and drivers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#riders-request-for-drivers&#34; &gt;Riders&amp;#39; request for drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drivers-data-from-in-database&#34; &gt;Drivers data from in database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-flow&#34; &gt;data flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scale&#34; &gt;Scale&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#db-sharding&#34; &gt;DB Sharding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-shard&#34; &gt;how to shard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#method-1-redis-master-slave&#34; &gt;method 1: Redis Master Slave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#method-2-better-nosql-database-choice&#34; &gt;method 2: better NoSQL database choice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;p&gt;System Design = Logic Design(why) + Infrastructure Design(how)&lt;/p&gt;
&lt;h2 id=&#34;design-uber&#34;&gt;Design UBER&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-design-uber&#34; name=&#34;design-uber&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;scenario-analysis&#34;&gt;Scenario analysis&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-scenario-analysis&#34; name=&#34;scenario-analysis&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;functional-requirement&#34;&gt;Functional Requirement&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-functional-requirement&#34; name=&#34;functional-requirement&#34;&gt;&lt;/a&gt;
First step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Driver report location&lt;/li&gt;
&lt;li&gt;Rider request Uber, match a driver with rider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Second step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rider cancel a request&lt;/li&gt;
&lt;li&gt;Driver deny / accept a request&lt;/li&gt;
&lt;li&gt;Driver cancel a request&lt;/li&gt;
&lt;li&gt;Driver pick up a rider&lt;/li&gt;
&lt;li&gt;Driver drop off a rider&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data&#34;&gt;data&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-data&#34; name=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022 2 million drivers in Uber (google)&lt;/p&gt;
&lt;p&gt;assume Peak Driver QPS = 300 k&lt;/p&gt;
&lt;p&gt;Storage acculation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assume every location data: 600 k * 86400 / 4 * 100 bytes ~ 1.3 T
(Driver report locations by every 4 seconds)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assume only store current location data: 600 k * 100 bytes = 60 M 
1 M = 10^6 bites&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-service&#34; name=&#34;service&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GeoServer (record locations)&lt;/li&gt;
&lt;li&gt;DispatchServer&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/system13.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Geo/Dispatch Service&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;How Drivers receive Riders&#39; request&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Report location, at the same time, the Service return matched request&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/system14.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Geo/Dispatch Service&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;storage&#34;&gt;Storage&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-storage&#34; name=&#34;storage&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dispatch Web Server&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;Trip Table&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Geo Web Server&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;Location Table&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider read/write frequency on a database table?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;schema&#34;&gt;Schema&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-schema&#34; name=&#34;schema&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;trip-class&#34;&gt;Trip Class&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-trip-class&#34; name=&#34;trip-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Trip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tripId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driverId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;riderId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startLatitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startLongitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endLatitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endLongitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Datetime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;Trip&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comments&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waiting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;the&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;way&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pick&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;up&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trip&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cancelled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ended&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;location-class&#34;&gt;Location Class&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-location-class&#34; name=&#34;location-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driverId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Latitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Longitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Datetime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;updateAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comments&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Primary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lng&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updated_at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Trip Class is a heavily read database, and Location class is the opposite&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;save-and-query-location-info&#34;&gt;save and query location info&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-save-and-query-location-info&#34; name=&#34;save-and-query-location-info&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how to search nearby drivers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;query the lat and lng from Location table, inorder to improve the query process, The &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt;  statement are used to create indexes in tables.&lt;/p&gt;
&lt;p&gt;create composite index &lt;code&gt;lat_lng_idx&lt;/code&gt; on &lt;code&gt;location_table&lt;/code&gt; ?&lt;/p&gt;
&lt;p&gt;actually, composite index can only be used in &lt;code&gt;accurate lat value and certain range of lng&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[111, 300] ~ [111, 400]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The index of the database can only solve one dimension Range Query.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Range Query with multiple dimensions cannot be efficiently queried.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;search-for-vehicles-within-a-2km-radius-use-geohash-in-database&#34;&gt;Search for vehicles within a 2km radius use geohash in database&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-search-for-vehicles-within-a-2km-radius-use-geohash-in-database&#34; name=&#34;search-for-vehicles-within-a-2km-radius-use-geohash-in-database&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;according to the geohash length, eg: find all vehicles start with &lt;code&gt;9q9jv&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;storage-geohash&#34;&gt;Storage (geohash)&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-storage-geohash&#34; name=&#34;storage-geohash&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;sql&#34;&gt;SQL&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-sql&#34; name=&#34;sql&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE INDEX on geohash&lt;/li&gt;
&lt;li&gt;SELECT * FROM location WHERE geohash LIKE&lt;code&gt; 9q9hv%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-cassandra&#34;&gt;NoSQL (Cassandra)&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-nosql-cassandra&#34; name=&#34;nosql-cassandra&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set geohash as column key&lt;/li&gt;
&lt;li&gt;range query (9q9hv0, 9q9hvz)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-redis&#34;&gt;NoSQL (Redis)&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-nosql-redis&#34; name=&#34;nosql-redis&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;storing Driver Location data hierarchy in redis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Driver locatoin is &lt;code&gt;9q9hvt&lt;/code&gt;, then store it in &lt;code&gt;9q9hvt&lt;/code&gt;, &lt;code&gt;9q9hv&lt;/code&gt;, &lt;code&gt;9q9h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;geohash of length &lt;code&gt;6&lt;/code&gt; produces cells that cover less than a square &lt;code&gt;1 kilometer&lt;/code&gt; of land, which is enough for Uber&lt;/li&gt;
&lt;li&gt;geohash of length &lt;code&gt;4&lt;/code&gt; produces cells that cover more than a square &lt;code&gt;20 kilometer&lt;/code&gt; of land&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key = 9q9hvt, value = set of drivers in this location&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-redis-as-database&#34;&gt;NoSQL (Redis) as database&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-nosql-redis-as-database&#34; name=&#34;nosql-redis-as-database&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;support list, set, remove in set is O(1).&lt;/p&gt;
&lt;p&gt;Read and write speed close to memory access speed &amp;gt;100k QPS.&lt;/p&gt;
&lt;h3 id=&#34;data-flow-between-riders-and-drivers&#34;&gt;data flow between riders and drivers&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-data-flow-between-riders-and-drivers&#34; name=&#34;data-flow-between-riders-and-drivers&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;riders-request-for-drivers&#34;&gt;Riders&#39; request for drivers&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-riders&#39;-request-for-drivers&#34; name=&#34;riders&#39;-request-for-drivers&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User makes a taxi request to find drivers around a given location
&lt;ul&gt;
&lt;li&gt;(lat,lng) → geohash → [driver1, driver2,&amp;hellip;]&lt;/li&gt;
&lt;li&gt;Check the 6-digit geohash to find the one within 0.6 km&lt;/li&gt;
&lt;li&gt;If there is no reply, then check the 5th geohash to find the one within 2.4 km&lt;/li&gt;
&lt;li&gt;If there is no reply, then check the 4-digit geohash ༌ to find the one within 20 kilometers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Location Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;geohash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver1_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver2_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver3_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The driver is successfully matched, and the user queries the location of the driver&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Driver Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updated_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trip_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;drivers-data-from-in-database&#34;&gt;Drivers data from in database&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-drivers-data-from-in-database&#34; name=&#34;drivers-data-from-in-database&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Drivers report their location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calculate the geohash of the current location lat, lng
&lt;ul&gt;
&lt;li&gt;geohash4, geohash5, geohash6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;query old location&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updates in the Redis&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;updates their latest active time in Driver Table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drivers accepty the riders request&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit the Trip status
&lt;ul&gt;
&lt;li&gt;when a riders sends request, Trip Table creates a trip and matches the closest driver.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;update their status as nonavailable in Driver Table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Driver complete the trip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit the Trip status&lt;/li&gt;
&lt;li&gt;update their status as available in Driver Table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;data-flow&#34;&gt;data flow&lt;/h4&gt;
&lt;p&gt;&lt;a id=&#34;markdown-data-flow&#34; name=&#34;data-flow&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Rider make requests, server create a trip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return &lt;code&gt;trip_id&lt;/code&gt; to rider&lt;/li&gt;
&lt;li&gt;send requests every few seconds to the server to check the match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;server find the matched driver, write to the trip, waiting for the driver&amp;rsquo;s response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;update the &lt;code&gt;driver&#39;s status&lt;/code&gt; as nonavailable, save in the related trip_id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;drivers report their location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find the &lt;code&gt;trip_id&lt;/code&gt; in &lt;code&gt;Driver table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;query the trip in &lt;code&gt;trip table&lt;/code&gt;, return to the driver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;driver accept the request&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;update the status info in &lt;code&gt;Driver Table&lt;/code&gt;, &lt;code&gt;Trip table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rider finds the match, get driver&amp;rsquo;s info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;driver rejuect the request&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;update the status info in &lt;code&gt;Driver Table&lt;/code&gt;, &lt;code&gt;Trip table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;server rematch a new driver, repeat step 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/system15.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Geo/Dispatch Service&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;scale&#34;&gt;Scale&lt;/h2&gt;
&lt;p&gt;&lt;a id=&#34;markdown-scale&#34; name=&#34;scale&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;demand: 300 QPS&lt;/p&gt;
&lt;p&gt;Redis is good choice for &amp;gt; 100 QPS. So we need 3-4 Redis server?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interviewer: one Redis server is crash?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;db-sharding&#34;&gt;DB Sharding&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-db-sharding&#34; name=&#34;db-sharding&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Distributing incoming network traffic&lt;/li&gt;
&lt;li&gt;Avoiding Single Point Failure&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;how-to-shard&#34;&gt;how to shard&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-how-to-shard&#34; name=&#34;how-to-shard&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sharding is based on the first 4 length Geohash&lt;/li&gt;
&lt;li&gt;query is based on the 4-6 length geohash numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or sharding by cities (geo fence)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interviewer: How to check rider is in Airport&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;create a geofence around a city then create a geofence arround airport.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interviewer: How to reduce impact on db crash?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;method-1-redis-master-slave&#34;&gt;method 1: Redis Master Slave&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-method-1%3A-redis-master-slave&#34; name=&#34;method-1%3A-redis-master-slave&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;write to the Master server, but slave server the reduce the read traffic.&lt;/p&gt;
&lt;h3 id=&#34;method-2-better-nosql-database-choice&#34;&gt;method 2: better NoSQL database choice&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;markdown-method-2%3A-better-nosql-database-choice&#34; name=&#34;method-2%3A-better-nosql-database-choice&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ig: 300k QPS, use 1000 Cassandra &amp;ndash;the average QPS of 300 per unit.&lt;/p&gt;
&lt;p&gt;It will help you better deal with Replica and recovery after a crash.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>