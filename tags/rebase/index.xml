<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rebase on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/rebase/</link>
    <description>Recent content in rebase on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Jun 2021 15:56:39 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/rebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Git in the Real Life for Beginners 6</title>
      <link>https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-6/</link>
      <pubDate>Wed, 16 Jun 2021 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-6/</guid>
      
        <description>&lt;p&gt;At the early of a project,  we tend to push lots of commit messages, but it would become difficult to maintain in the future.&lt;/p&gt;
&lt;h3 id=&#34;7make-the-commit-history-more-clean&#34;&gt;7.Make the commit history more clean&lt;/h3&gt;
&lt;p&gt;My commit history just like net&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/4.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Recursive Stratege Merge&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;rebase is like this&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/7.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;rebase&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;rebase enable you have a clear, line commit history&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rebase object : which branch you wannt change the history, checkout to this branch&lt;/li&gt;
&lt;li&gt;choose the base&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout develop
&lt;br&gt;
git rebase master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;branch commit SHA1 value changed, and move behind master&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;git rebase -i HEAD^^^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pick Commands:
p, r, e, s, f, x, d&lt;/p&gt;
&lt;p&gt;return the third commit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git rebase -continue^^^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I finish a project, sometimes, the commits are meanless, it&amp;rsquo;s better to combine some commit
before : &lt;code&gt;C1&lt;/code&gt; &amp;lt;&amp;ndash; &lt;code&gt;C2&lt;/code&gt; &amp;lt;&amp;ndash; &lt;code&gt;C3&lt;/code&gt; &amp;lt;&amp;ndash;&lt;code&gt;C4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;after: &lt;code&gt;C1&lt;/code&gt; &amp;lt;&amp;ndash; &lt;code&gt;C5&lt;/code&gt; &amp;lt;&amp;ndash; &lt;code&gt;C6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reword&lt;/code&gt;
&lt;code&gt;fixup&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;combine C2, C3, C4, use HEAD^^^&lt;/li&gt;
&lt;li&gt;C2 combine C3 into C5, &lt;code&gt;fixup&lt;/code&gt; or &lt;code&gt;squash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C5 don&amp;rsquo;t need save C3, so C3 use &lt;code&gt;fixup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C5 commit message is differ from C2 and C3, so C2 need change, use &lt;code&gt;reword&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C4 commit message need fix, use &lt;code&gt;reword&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rebase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^^^&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;reword&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4572587&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fixup&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;erx90&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;reword&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bb4563&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;reword&lt;/code&gt; allow you to fix like commit message..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;the only rule: once you push your branch to remote, or someone have your branch on his project,  then you cannot rebase that branch&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git gc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;git gc it can compress the files, use if often.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;工作区暂存区&#34;&gt;工作区暂存区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#当执行如下命令时，会直接从暂存区删除文件，工作区则不做出改变&lt;/span&gt;
git rm --cached &amp;lt;file&amp;gt;
&lt;span class=&#34;c1&#34;&gt;#相当于取消自上次执行git add filename以来（如果执行过）的本地修改。&lt;/span&gt;
git checkout -- filename
&lt;span class=&#34;c1&#34;&gt;#注意会将暂存区和工作区中的filename文件直接覆盖。&lt;/span&gt;
git checkout branch -- filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;push-错误&#34;&gt;push 错误：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git reflog 
&lt;span class=&#34;c1&#34;&gt;# 找到最近的版本，0是最近的，&lt;/span&gt;
git reset --hard HEAD&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;7&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
git push origin BeanDefinition-BeanDefinitionRegistry --force
&lt;span class=&#34;c1&#34;&gt;# 要提交，加--force才可以&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;git rm &amp;ndash;cached file-name 从add加入暂存区回来
分支管理策略:
git merge &amp;ndash;no-ff other 禁用Fast forward模式，因为使用Fast forward模式，删除分支后，分支历史信息会丢失。&lt;/p&gt;
&lt;h3 id=&#34;删除远程分支&#34;&gt;删除远程分支&lt;/h3&gt;
&lt;p&gt;$ git push origin &amp;ndash;delete [branch-name]
$ git branch -dr origin/branch-name&lt;/p&gt;
&lt;h3 id=&#34;新建一个分支与指定的远程分支建立追踪关系&#34;&gt;新建一个分支，与指定的远程分支建立追踪关系&lt;/h3&gt;
&lt;p&gt;$ git branch &amp;ndash;track [branch] [remote-name]&lt;/p&gt;
&lt;h3 id=&#34;新建一个分支不成功是因为没有fetch&#34;&gt;新建一个分支,不成功是因为没有fetch&lt;/h3&gt;
&lt;p&gt;git fetch origin
git checkout -b b2 origin/b1 // base b1 branch get a new b2 branch&lt;/p&gt;
&lt;h3 id=&#34;新建一个分支指向指定commit使用命令&#34;&gt;新建一个分支，指向指定commit使用命令：&lt;/h3&gt;
&lt;p&gt;git log
// commit xxxxxxxxxx
// author: xxxxx
$ git branch [branch] [commit]&lt;/p&gt;
&lt;h3 id=&#34;绑定存放源文件的远程仓库&#34;&gt;绑定存放源文件的远程仓库&lt;/h3&gt;
&lt;p&gt;git remote add origin &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:username/&lt;YOUR-PROJECT&gt;.git&lt;/p&gt;
&lt;p&gt;$ usage: git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt;&lt;/p&gt;
&lt;p&gt;`&lt;/p&gt;
&lt;h3 id=&#34;git-tag&#34;&gt;git tag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;操作标签
git tag -d v1.0  
&lt;span class=&#34;c1&#34;&gt;# 删除标签。因为创建的标签都只存储在本地，不会自动推送到远程。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#所以，打错的标签可以在本地安全删除。&lt;/span&gt;

git push origin  
&lt;span class=&#34;c1&#34;&gt;# 推送某个标签到远程&lt;/span&gt;

git push origin --tags 
&lt;span class=&#34;c1&#34;&gt;# 一次性推送全部尚未推送到远程的本地标签&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 如果标签推送到远程。&lt;/span&gt;
git tag -d v1.0 
&lt;span class=&#34;c1&#34;&gt;# 先删除本地标签v1.0。&lt;/span&gt;
git push origin :refs/tags/v1.0
&lt;span class=&#34;c1&#34;&gt;# 删除远程标签v1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gitignore&#34;&gt;gitignore&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 忽略所有的 .a 文件&lt;/span&gt;
*.a

&lt;span class=&#34;c1&#34;&gt;# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件&lt;/span&gt;
!lib.a

&lt;span class=&#34;c1&#34;&gt;# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO&lt;/span&gt;
/TODO

&lt;span class=&#34;c1&#34;&gt;# 忽略任何目录下名为 build 的文件夹&lt;/span&gt;
build/

&lt;span class=&#34;c1&#34;&gt;# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt&lt;/span&gt;
doc/*.txt

&lt;span class=&#34;c1&#34;&gt;#忽略 doc/ 目录及其所有子目录下的 .pdf 文件&lt;/span&gt;
doc/**/*.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-5/&#34; &gt;Git5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-4/&#34; &gt;Git4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-3/&#34; &gt;Git3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-2/&#34; &gt;Git2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/using-git-in-the-real-life-for-beginners-1/&#34; &gt;Git1&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>