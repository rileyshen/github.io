<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chain of Responsibility on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/chain-of-responsibility/</link>
    <description>Recent content in Chain of Responsibility on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 15:23:47 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/chain-of-responsibility/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chain of Responsibility, Command and Iterator, Mediator, Memento</title>
      <link>https://rileyshen.github.io/post/designpattern4-copy/</link>
      <pubDate>Sun, 10 Apr 2022 15:23:47 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/designpattern4-copy/</guid>
      
        <description>&lt;h3 id=&#34;1-chain-of-responsibility&#34;&gt;1. Chain of Responsibility&lt;/h3&gt;
&lt;p&gt;当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。当必须按顺序执行多个处理者时， 可以使用该模式。如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AuthService&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 提供了两个接⼝⼀个是查询审核结果( queryAuthInfo )、另外⼀个是处理审核( auth )。
这部分是把由谁审核的和审核的单⼦ID作为唯⼀key值记录到内存Map结构中。 --&gt;
&lt;ul&gt;
&lt;li&gt;AuthController&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- if一级审批，如果二级，一坨if else --&gt;
&lt;p&gt;重写后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imp
&lt;ul&gt;
&lt;li&gt;Level1AuthLink.jav&lt;/li&gt;
&lt;li&gt;Level2AuthLink.jav&lt;/li&gt;
&lt;li&gt;Level3AuthLink.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AuthInfo.java&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 责任链处理过程中返回结果的类，⽅⾯处理每个责任链的返回信息 --&gt;
&lt;ul&gt;
&lt;li&gt;AuthLink.java&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 这部分是责任链，链接起来的核⼼部分。 AuthLink next ，᯿点在于可以通过 next ⽅式获取下
⼀个链路需要处理的节点。
levelUserId 、 levelUserName ，是责任链中的公⽤信息，标记每⼀个审核节点的⼈员信息。
抽象类中定义了⼀个抽象⽅法， abstract AuthInfo doAuth ，这是每⼀个实现者必须实现的
类，不同的审核级别处理不同的业务。 --&gt;
&lt;p&gt;⼀般在使⽤责任链时候如果是场景⽐较固定，可以通过写死到代码中进⾏初始化。但如果业务场景
经常变化可以做成xml配置的⽅式进⾏处理，也可以落到库⾥进⾏初始化操作&lt;/p&gt;
&lt;p&gt;测试类&lt;/p&gt;
&lt;p&gt;AuthLink new 一个新类，里面包含了三级人员信息&lt;/p&gt;
&lt;p&gt;AuthService.auth模拟审批&lt;/p&gt;
&lt;h3 id=&#34;2-command&#34;&gt;2. Command&lt;/h3&gt;
&lt;p&gt;通过操作来参数化对象,将操作放入队列中、 操作的执行或者远程执行操作， 可使用命令模式,实现操作回滚功&lt;/p&gt;
&lt;p&gt;比如点菜，根据客户不同需求服务员传递给厨师。&lt;/p&gt;
&lt;p&gt;避免一堆的if else&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;result
&lt;ul&gt;
&lt;li&gt;impl
&lt;ul&gt;
&lt;li&gt;A&lt;/li&gt;
&lt;li&gt;B&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IRes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require
&lt;ul&gt;
&lt;li&gt;impl
&lt;ul&gt;
&lt;li&gt;AReq&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- private IRes res --&gt;
&lt;ul&gt;
&lt;li&gt;BReq&lt;/li&gt;
&lt;li&gt;CReq&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IRequire&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commander&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3--iterator&#34;&gt;3.  Iterator&lt;/h3&gt;
&lt;p&gt;当集合背后为复杂的数据结构， 且你希望对客户端隐藏其复杂性时 （出于使用便利性或安全性的考虑）， 可以使用迭代器模式,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;group
&lt;ul&gt;
&lt;li&gt;Employee.java&lt;/li&gt;
&lt;li&gt;GroupStructure.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- s GroupStructure implements Collection&lt;Employee, Link&gt;  --&gt;
&lt;ul&gt;
&lt;li&gt;Link.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 这个类⽤于描述结构树中的各个节点之间的关系链，也就是 A to B 、 B to C 、 B to D ，以此描述出⼀套完整的树组织结构 --&gt;
&lt;/li&gt;
&lt;li&gt;lang
&lt;ul&gt;
&lt;li&gt;Collection.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- interface Collection&lt;E, L&gt; extends Iterable&lt;E&gt; --&gt;
&lt;ul&gt;
&lt;li&gt;Iterable.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- Iterator&lt;E&gt; iterator(); 置入 --&gt;
&lt;ul&gt;
&lt;li&gt;Iterator.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-mediator&#34;&gt;4. Mediator&lt;/h3&gt;
&lt;p&gt;当一些对象和其他对象紧密耦合以致难以对其进行修改时， 可使用中介者模式, 当组件因过于依赖其他组件而无法在不同应用中复用时，如果为了能在不同情景下复用一些基本行为， 导致你需要被迫创建大量组件子类时， 可使用中介者模式。&lt;/p&gt;
&lt;p&gt;Mysql和Oracle都是数据库层， ORM框架就是中介，再到不同的应用&lt;/p&gt;
&lt;p&gt;比如只用了一个JDBCUtil时候，直接操作数据库，用中介模式开发ORM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dao&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISchool.java&lt;/li&gt;
&lt;li&gt;IUserDao.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mediator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configuration.java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SqlSession.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 定义了对数据库操作的查询接⼝ &lt;T&gt; T selectOne(String statement)--&gt;
&lt;ul&gt;
&lt;li&gt;DefaultSqlSession.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 接⼝定义的⽅法实现，也就是包装了jdbc层--&gt;
&lt;ul&gt;
&lt;li&gt;SqlSessionFactory.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- interface SqlSession openSession(); --&gt;
  &lt;!--  开启⼀个 SqlSession ， 这⼏乎是⼤家在平时的使⽤中都需要进⾏操作的内容。虽然你看不⻅，但是当你有数据库操作的时候都会获取每⼀次执⾏的 SqlSession--&gt;
&lt;ul&gt;
&lt;li&gt;DefaultSqlSessionFactory.java&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 当开启 SqlSession 时会进⾏返回⼀个 DefaultSqlSession --&gt;
&lt;ul&gt;
&lt;li&gt;SqlSessionFactoryBuilder.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- build(构建实例化元素) parseConfiguration(解析配置) 、
dataSource(获取数据库配置) 、 connection(Map&lt;String, String&gt; dataSource) (链接数据
库) 、 mapperElement (解析sql语句)--&gt;
&lt;pre&gt;&lt;code&gt;- Resources.java
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过中介者模式的设计思想⼿写⼀个ORM框架，隐去了对数据库操作的复杂度，让外
部的调⽤⽅可以⾮常简单的进⾏操作数据库。这也是平常使⽤的 Mybatis 的原型，在⽇
常的开发使⽤中，只需要按照配置即可⾮常简单的操作数据库。&lt;/p&gt;
&lt;p&gt;还有服务接⼝的包装也可以使⽤中介者模式来实现。可以把这些奖品接⼝统⼀收到中台开发⼀个奖品
中⼼，对外提供服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;po
&lt;ul&gt;
&lt;li&gt;School.java&lt;/li&gt;
&lt;li&gt;User.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中介者模式模型结构 
以上是对ORM框架实现的核⼼类，包括了；加载配置⽂件、对xml解析、获取数据库session、操
作数据库以及结果返回。
左上是对数据库的定义和处理，基本包括我们常⽤的⽅法； &lt;T&gt; T selectOne 、 &lt;T&gt; List&lt;T&gt;
selectList 等。
右侧蓝⾊部分是对数据库配置的开启session的⼯⼚处理类，这⾥的⼯⼚会操
作 DefaultSqlSession
之后是红⾊地⽅的 SqlSessionFactoryBuilder ，这个类是对数据库操作的核⼼类；处理⼯⼚、
解析⽂件、拿到session等。
接下来我们就分别介绍各个类的功能实现过程。
2. 代码实现
2.1 定义SqlSession接⼝
$ !&amp;quot;&amp;quot; resources
$ #&amp;quot;&amp;quot; mapper
$ $ #&amp;quot;&amp;quot; School_Mapper.xml
$ $ !&amp;quot;&amp;quot; User_Mapper.xml
$ !&amp;quot;&amp;quot; mybatis-config-datasource.xml&lt;/p&gt;
&lt;h3 id=&#34;5-memento&#34;&gt;5. Memento&lt;/h3&gt;
&lt;p&gt;对象快照，数据安全性&lt;/p&gt;
&lt;p&gt;old：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Admin&lt;/li&gt;
&lt;li&gt;ConfigFile
  &lt;!-- 版本号  内容  时间 操作⼈ --&gt;
&lt;/li&gt;
&lt;li&gt;ConfigMemento : 备忘录类，相当于是对原有配置类的扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- field为configfile，然后get set方法 --&gt;
&lt;ul&gt;
&lt;li&gt;ConfigOriginator :记录者类，获取和返回备忘录类对象信息&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- field为configfile，然后get set方法， 多了个 新建 ConfigMemento，和得到ConfigMemento的方法--&gt;
&lt;p&gt;admin逻辑：
new一个admin，ConfigOriginator记录着&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;configOriginator.setConfigFile，记录一个版本号
admin.append(ConfigOriginator.saveMemento())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回滚
configOriginator.getMemento(admin.undo())&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>