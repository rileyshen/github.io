<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Observer on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/observer/</link>
    <description>Recent content in Observer on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 15:23:47 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/observer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Observer,  State and Strategy, Template Method,  Visitor</title>
      <link>https://rileyshen.github.io/post/designpattern4/</link>
      <pubDate>Sun, 10 Apr 2022 15:23:47 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/designpattern4/</guid>
      
        <description>&lt;h3 id=&#34;1-observer&#34;&gt;1. Observer&lt;/h3&gt;
&lt;p&gt;当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。&lt;/p&gt;
&lt;p&gt;抽签系统，摇号，发短信，发MQ消息，后面两个会随着业务调整而调整，不利于维护&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;interface EventListener&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MessageEventListener implements EventListener&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MQEventListener implements EventListener&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 事件处理类 --&gt;
&lt;ul&gt;
&lt;li&gt;EventManager
&lt;ul&gt;
&lt;li&gt;enum EventType (MQ, Message)&lt;/li&gt;
&lt;li&gt;订阅subscribe&lt;/li&gt;
&lt;li&gt;订阅unsubscribe&lt;/li&gt;
&lt;li&gt;notify 通知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 业务抽象类接⼝ --&gt;
&lt;ul&gt;
&lt;li&gt;abstract class LotteryService
在抽象类中写好⼀个基本的⽅法，在⽅法中完成新增逻辑的同时，再增加抽象
类的使⽤。⽽这个抽象类的定义会有继承者实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;业务结构就只需要uid和日期&lt;/p&gt;
&lt;h3 id=&#34;2--state&#34;&gt;2.  State&lt;/h3&gt;
&lt;p&gt;策略模式相似， 但有一个关键性的不同——在状态模式中， 特定状态知道其他所有状态的存在， 且能触发从一个状态到另一个状态的转换； 策略则几乎完全不知道其他策略的存在。&lt;/p&gt;
&lt;p&gt;如果对象需要根据自身当前状态进行不同行为， 同时状态的数量非常多且与状态相关的代码会频繁变更的话， 可使用状态模式。&lt;/p&gt;
&lt;p&gt;如果某个类需要根据成员变量的当前值改变自身行为， 从而需要使用大量的条件语句时， 可使用该模式。&lt;/p&gt;
&lt;p&gt;模拟一个事件的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ActivityInfo&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 活动细节 --&gt;
&lt;ul&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 活动状态 --&gt;
&lt;ul&gt;
&lt;li&gt;ActivityService&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 查询活动信息，状态，状态变更 --&gt;
&lt;p&gt;所以逻辑就是如果状态是a，那状态b，c发生，如果是D，那be发生之类的&lt;/p&gt;
&lt;p&gt;非常崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event
&lt;ul&gt;
&lt;li&gt;AState extends State&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 同个⽅法对于不同的类中有不同的实现，也就是不同状态
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下能做的下⼀步流转操作已经可以在每⼀个⽅法中具体控制了。 &amp;ndash;&amp;gt;
+ BState
&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abstract Status&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 在整个接⼝中提供了各项状态流转服务的接⼝，例如；活动提审、审核通过、审核拒绝、撤审撤销
等7个⽅法。
在这些⽅法中所有的⼊参都是⼀样的，activityId( 活动ID )、currentStatus( 当前状态 )，只有他们
的具体实现是不同的。 --&gt;
&lt;ul&gt;
&lt;li&gt;Result&lt;/li&gt;
&lt;li&gt;StateHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 这是对状态服务的统⼀控制中⼼，可以看到在构造函数中提供了所有状态和实现的具体关联，放到
Map数据结构中 --&gt;
&lt;h3 id=&#34;3-strategy&#34;&gt;3. Strategy&lt;/h3&gt;
&lt;p&gt;装饰模式可让你更改对象的外表， 策略则让你能够改变其本质， 这个模式理解起来不同打折卷&lt;/p&gt;
&lt;p&gt;跟工厂模式区分？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兩者的差別在於工廠模式中的工廠類別並不會去使用產品，因為工廠模式只關注在如何產生建立物件；在策略模式中的環境類別則是使用外部傳入的策略類別，因此我們必須知道傳入策略的實際內容才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4-template-method&#34;&gt;4. Template Method&lt;/h3&gt;
&lt;p&gt;工厂方法模式是模板方法模式的一种特殊形式。 同时， 工厂方法可以作为一个大型模板方法中的一个步骤。&lt;/p&gt;
&lt;p&gt;模板方法基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 策略模式基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 模板方法在类层次上运作， 因此它是静态的。 策略在对象层次上运作， 因此允许在运行时切换行为&lt;/p&gt;
&lt;h3 id=&#34;5-visitor&#34;&gt;5. Visitor&lt;/h3&gt;
&lt;p&gt;如果你需要对一个复杂对象结构 （例如对象树） 中的所有元素执行某些操作， 可使用访问者模式。&lt;/p&gt;
&lt;p&gt;访问者模式通过在访问者对象中为多个目标类提供相同操作的变体， 让你能在属于不同类的一组对象上执行同一操作。&lt;/p&gt;
&lt;p&gt;可使用访问者模式来清理辅助行为的业务逻辑。&lt;/p&gt;
&lt;p&gt;该模式会将所有非主要的行为抽取到一组访问者类中， 使得程序的主要类能更专注于主要的工作。&lt;/p&gt;
&lt;p&gt;当某个行为仅在类层次结构中的一些类中有意义， 而在其他类中没有意义时， 可使用该模式。&lt;/p&gt;
&lt;p&gt;你可将该行为抽取到单独的访问者类中， 只需实现接收相关类的对象作为参数的访问者方法并将其他方法留空即可。&lt;/p&gt;
&lt;p&gt;了访问者模式的核⼼在于同⼀个事物不同视⻆下的访问信息不同，⽐如⼀个 美⼥ ⼿⾥拿个 冰激
凌 。⼩朋友会注意冰激凌，⼤朋友会找⾃⼰喜欢的地⽅观测敌情。&lt;/p&gt;
&lt;p&gt;这个模式通常用于游客访问等，或者不同职别管理层看到的，反正增加类别是有用，但是visitor用了底层员工信息和方法，我看不出它哪里优秀，可能太复杂了，我没理解&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>