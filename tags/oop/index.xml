<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OOP on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/oop/</link>
    <description>Recent content in OOP on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Feb 2021 15:56:39 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java 面试复习 1</title>
      <link>https://rileyshen.github.io/post/oop/</link>
      <pubDate>Tue, 16 Feb 2021 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/oop/</guid>
      
        <description>&lt;p&gt;类 {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;main{


新对象

对象.属性；

对象.方法
}

对象{
    属性，
    方法
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&#34;封装性&#34;&gt;封装性&lt;/h2&gt;
&lt;h3 id=&#34;体现一将类的属性-xxx-私化private同时提供公共的public方法来获取getxxx和设置setxxx此属性的值public-private-等四种权限都是封装性的体现&#34;&gt;体现一：将类的属性 xxx 私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值(public, private 等四种权限都是封装性的体现)&lt;/h3&gt;
&lt;h3 id=&#34;体现二不对外暴露的私有的方法&#34;&gt;体现二：不对外暴露的私有的方法&lt;/h3&gt;
&lt;h3 id=&#34;体现三单例模式将构造器私有化&#34;&gt;体现三：单例模式（将构造器私有化）&lt;/h3&gt;
&lt;h3 id=&#34;体现四如果不希望类在包外被调用可以将类设置为缺省的&#34;&gt;体现四：如果不希望类在包外被调用，可以将类设置为缺省的&lt;/h3&gt;
&lt;h2 id=&#34;多态的好处&#34;&gt;多态的好处&lt;/h2&gt;
&lt;p&gt;没有了多态，就必须多造备注掉的两个 func（Dog dog），func（Cat cat）两个类，有了多态，只用一个 animal 后，就可以直接调用 test.func(new Dog())，animal 的子类。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AnimalTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		
		&lt;span class=&#34;n&#34;&gt;AnimalTest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnimalTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
		
		
		&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//Animal animal = new Dog();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
		
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
&lt;span class=&#34;c1&#34;&gt;//	public void func(Dog dog){
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//		dog.eat();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//		dog.shout();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//	}
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//	public void func(Cat cat){
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//		cat.eat();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//		cat.shout();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//	}
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;动物：进食&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;动物：叫&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Dog&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;狗吃骨头&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;汪！汪！汪！&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;watchDoor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;看门&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;猫吃鱼&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;喵！喵！喵！&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对象的多态性&#34;&gt;对象的多态性&lt;/h3&gt;
&lt;p&gt;Person p = new Students();&lt;/p&gt;
&lt;p&gt;new 的对象体现的是多种形态：父类的引用指向子类的对象&lt;/p&gt;
&lt;h3 id=&#34;虚拟方法调用&#34;&gt;虚拟方法调用&lt;/h3&gt;
&lt;p&gt;编译时看左边，运行时看右边&lt;/p&gt;
&lt;h2 id=&#34;equals方法&#34;&gt;equals()方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;java.lang.Object 类： Object 类是所 Java 类的根父类， 只声明了一个空参的构造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object 类中 equals()的定义：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;说明object-类中定义的-equals和的作用是相同的比较两个对象的地址值是否相同即两个引用是否指向同一个对象实体&#34;&gt;说明：Object 类中定义的 equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体&lt;/h3&gt;
&lt;h3 id=&#34;通常情况下我们自定义的类如果使用-equals的话也通常是比较两个对象的实体内容是否相同那么我们&#34;&gt;通常情况下，我们自定义的类如果使用 equals()的话，也通常是比较两个对象的&amp;quot;实体内容&amp;quot;是否相同。那么，我们&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;就需要对 Object 类中的 equals()进行重写.&lt;/li&gt;
&lt;li&gt;重写的原则：比较两个对象的实体内容是否相同.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//重写其equals()方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 判断地址相同，相同就直接true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 判断obj是不是一个User，然后转成User，才能出现.age和.name来判断
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;java-中的-junit-单元测试&#34;&gt;Java 中的 JUnit 单元测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.创建 Java 类，进行单元测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时的 Java 类要求：① 此类是 public 的  ②此类提供公共的无参的构造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.此类中声明单元测试方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时的单元测试方法：方法的权限是 public,没返回值，没形参&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.如果执行结果没任何异常：绿条&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.如果执行结果出现异常：红条&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;
&lt;h3 id=&#34;对-java-类或对象进行初始化&#34;&gt;对 Java 类或对象进行初始化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//为total赋初值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;……&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//其它属性或方法声明
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; 静态代码块：用 static 修饰的代码块&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以有输出语句。&lt;/li&gt;
&lt;li&gt;可以对类的属性、类的声明进行初始化操作。&lt;/li&gt;
&lt;li&gt;不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。&lt;/li&gt;
&lt;li&gt;若有多个静态的代码块，那么按照从上到下的顺序依次执行。&lt;/li&gt;
&lt;li&gt;静态代码块的执行要先于非静态代码块。&lt;/li&gt;
&lt;li&gt;静态代码块随着类的加载而加载，且只执行一次&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;非静态代码块：没有 static 修饰的代码块&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以有输出语句。&lt;/li&gt;
&lt;li&gt;可以对类的属性、类的声明进行初始化操作。&lt;/li&gt;
&lt;li&gt;除了调用非静态的结构外，还可以调用静态的变量或方法。&lt;/li&gt;
&lt;li&gt;若有多个非静态的代码块，那么按照从上到下的顺序依次执行。&lt;/li&gt;
&lt;li&gt;每次创建对象的时候，都会执行一次。且先于构造器执行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;in static block!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PersonTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;total = &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;total = &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;in static block
total=100
total=100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;idea-配置&#34;&gt;idea 配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;bin 打开 idea.exe.vmoptions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;-Xms128m
-Xmx750m
-XX:ReservedCodeCacheSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;512m
-XX:+UseConcMarkSweepGC
-XX:SoftRefLRUPolicyMSPerMB&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;
-XX:CICompilerCount&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
-ea
-Dsun.io.useCanonCaches&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
-Djdk.http.auth.tunneling.disabledSchemes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
-Djdk.attach.allowAttachSelf&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
-Djdk.module.illegalAccess.silent&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
-Dkotlinx.coroutines.debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;64 位系统，内存大于 8G，开发大型项目，java/android 项目，修改以下三个参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;-Xms128m//

-Xms512m
设置初始内存数，提高java程序启动速度
-Xmx750m//

-Xmx1500m
这个数值可以减少内存Garage收集频率，提高程序性能

-XX:ReservedCodeCacheSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;512m

500m，


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;idea-中的快捷键&#34;&gt;idea 中的快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.补全代码的声明：Ctrl+Shift+Space&lt;/li&gt;
&lt;li&gt;1.1 补全： Alt + Enter&lt;/li&gt;
&lt;li&gt;1.2 类名或接口名提示: Ctrl + Alt + 空格&lt;/li&gt;
&lt;li&gt;1.3 引入方法返回值对应的变量: Ctrl + Alt + V&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 快速打开方法 --&gt;
&lt;ul&gt;
&lt;li&gt;2.快速打开方法: Alt + 鼠标左键&lt;/li&gt;
&lt;li&gt;3.使用单行注释：ctrl + /&lt;/li&gt;
&lt;li&gt;4.使用多行注释： ctrl + shift + /&lt;/li&gt;
&lt;li&gt;5.方法间快速移动：Alt＋Up  Alt＋Down&lt;/li&gt;
&lt;li&gt;6.复制指定行的代码：Ctrl + D&lt;/li&gt;
&lt;li&gt;7.删除指定行的代码：ctrl + X&lt;/li&gt;
&lt;li&gt;7.显示方法的参数信息：Ctrl + P&lt;/li&gt;
&lt;li&gt;8.上下移动代码：Shift + Alt + Up  / Shift + Alt + Down&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 将一段代码抽取成方法 --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;将一段代码抽取成方法: Crtl + Alt + M&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;9.切换到下一行代码空位：shift + enter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12.将光标移到前或后编辑历史记录处: Ctrl+ Alt+ Right&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12.1 跳到大括号的开头/结尾: Ctrl＋[  / Ctrl＋]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12.2 高亮错误或警告快速定位 F2 / Shift + F2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;22.格式化代码： Ctrl+Alt+L&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23.选中数行，整体往后移动：tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;24.选中数行，整体往前移动：shift + tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;25 浮动窗显示类结构，通过输入关键词完成快速定位类元素：Ctrl + F12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;26.重命名变量、文件、类等：Shift + F6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;27.字母大小写转换： Ctrl + Shift + U&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30.调出生成 getter/setter/构造器等结构： Alt+Insert&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30.把代码包在一块内，例如 try/catch： Ctrl＋Alt＋T&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32.快速查找：ctrl + F&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 查找类比如 StringBuffer 里面的所有的方法：ctrl + F12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;33.关闭当前其他窗口：alt + 关闭窗口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;ok-its-time-for-thread1hahahugoshortcode-s0-hbhb&#34;&gt;Ok, It&amp;rsquo;s time for &lt;a href=&#34;https://rileyshen.github.io/post/thread/&#34; &gt;Thread1&lt;/a&gt;&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>java 面试复习 2</title>
      <link>https://rileyshen.github.io/post/thread/</link>
      <pubDate>Tue, 16 Feb 2021 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/thread/</guid>
      
        <description>&lt;h2 id=&#34;thread&#34;&gt;Thread&lt;/h2&gt;
&lt;p&gt;多线程创建： 方式一： 继承 Thread 类
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;muti-thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;结果：多线程交互
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread1.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread result&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread2.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread result&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;如果把-t1start改为-t1run&#34;&gt;如果把 t1.start()改为 t1.run()&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread3.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;不用-start后其实没有创造新的-thread-只是调用了方法而已&#34;&gt;不用 start()后，其实没有创造新的 Thread, 只是调用了方法而已&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread4.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;不管-run-几次都是分明的两个线程而不是新建一个多线程&#34;&gt;不管 run 几次，都是分明的两个线程，而不是新建一个多线程&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread6.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;再启动一个线程遍历&#34;&gt;再启动一个线程遍历&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread5.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;不可以让已经执行-start的线程去执行会报-illegalthreadstateexception&#34;&gt;不可以让已经执行 start()的线程去执行，会报 IllegalThreadStateException&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread7.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;再启动新线程需要新一个对象&#34;&gt;再启动新线程，需要新一个对象&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread8.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;练习-创建两个分线程其中一个线程遍历-100-以内的偶数另一个遍历-100-以内的奇数&#34;&gt;练习： 创建两个分线程，其中一个线程遍历 100 以内的偶数，另一个遍历 100 以内的奇数&lt;/h2&gt;
&lt;p&gt;可以用更简洁的方式创建，匿名子类
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread9.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread10.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;static-void-yield&#34;&gt;static void yield()&lt;/h3&gt;
&lt;h3 id=&#34;join-在线程-a-中调用线程-b-的-join此时线程-a-就进入阻塞状态直到线程-b-完成执行完以后线程-a-才借宿阻塞状态&#34;&gt;join() ：在线程 a 中调用线程 b 的 join（），此时线程 a 就进入阻塞状态，直到线程 b 完成执行完以后，线程 a 才借宿阻塞状态&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread12.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread13.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;static-void-sleeplong-millis&#34;&gt;static void sleep(long millis)&lt;/h3&gt;
&lt;h3 id=&#34;stop&#34;&gt;stop()&lt;/h3&gt;
&lt;h3 id=&#34;boolean-isalive&#34;&gt;boolean isAlive()&lt;/h3&gt;
&lt;h3 id=&#34;setname除了在主线程中运用-setname-外可以直接用带-name-的参数的构造器创建线程&#34;&gt;（setName():除了在主线程中运用 setName 外，）可以直接用带 name 的参数的构造器创建线程&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread11.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;线程优先级&#34;&gt;线程优先级&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;设置优先级比较高，只是概率上执行起来高，而不能百分百保证先执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;h1.setPriority(Thread.MAX_PRIORITY);&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread14.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;线程练习卖票认识存在安全问题&#34;&gt;线程练习：卖票（认识存在安全问题）&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread15.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;private static int ticket = 100;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;线程不安全的体现&#34;&gt;线程不安全的体现&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread16.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;创建线程第二种方法-runable&#34;&gt;创建线程第二种方法 Runable&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread17.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;线程练习卖票认识存在安全问题-1&#34;&gt;线程练习：卖票（认识存在安全问题）&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread18.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;private int ticket = 100;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;线程创建两种方式对比-extends-thread-和-implement-runnable&#34;&gt;线程创建两种方式对比： extends Thread 和 implement runnable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为有类的单继承的局限性,所以优先选择 implement runnable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现的方式更适合来护理多个线程有共享数据的情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;联系:public class Thread implents Runnable,他们都需要重写 run()&lt;/p&gt;
&lt;h3 id=&#34;线程安全问题&#34;&gt;线程安全问题&lt;/h3&gt;
&lt;p&gt;当一个线程 a 在操作 ticket 的时候，其他线程不能参与进来，知道线程 a 操作完成 ticket 时候&lt;/p&gt;
&lt;p&gt;其他线程才可以开始操作 ticket，这种情况即使线程 a 出现阻塞，也不能被改编&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;方法一-synchronized&#34;&gt;方法一： synchronized&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;synchronized(同步监视器) {
需要被同步的代码
}&lt;/p&gt;
&lt;p&gt;说明： 1.操作共享数据的代码，极为需要被同步的代码
2. 共享数据： 多个线程共同操作的变量： ticket
3. 同步监视器，可以是任何类的对象&lt;/p&gt;
&lt;p&gt;解决了线程安全问题，
只有一个线程参与，其他等待，效率低&lt;/p&gt;
&lt;p&gt;synchronized (this), 可以用 this 来代替 obj，&lt;/p&gt;
&lt;p&gt;而 extend thread 中，要慎用 this，可以用 synchronized (windows。class)这种话方法,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread19.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;方法二-同步方法&#34;&gt;方法二： 同步方法&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方式 2： 同步方法解决 Runnable 线程安全问题
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread20.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;方式 2： 同步方法解决 extend 线程安全问题
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread21.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同步方法仍然设计到同步监视器，只是不需要我们显式的声明&lt;/li&gt;
&lt;li&gt;非静态的同步方法，同步监视器是： this
静态同步方法，同步监视器是： 当前类本身&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;使用同步机制将单例模式的懒汉式改写为线程安全&#34;&gt;使用同步机制将单例模式的懒汉式改写为线程安全&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但同步锁会增加锁竞争，带来系统性能开销，从而导致系统性能下降，因此这种方式也会降低单例模式的性能。
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread22.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此方法效率稍差：&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread23.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;此方法效率高的方法：
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread24.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;dead-lock&#34;&gt;Dead Lock&lt;/h3&gt;
&lt;br&gt;
&lt;h4 id=&#34;ok-its-time-for-thread2hahahugoshortcode-s25-hbhb&#34;&gt;Ok, It&amp;rsquo;s time for &lt;a href=&#34;https://rileyshen.github.io/post/thread2/&#34; &gt;Thread2&lt;/a&gt;&lt;/h4&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/oop/&#34; &gt;Thread1&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>java面试复习3</title>
      <link>https://rileyshen.github.io/post/thread2/</link>
      <pubDate>Tue, 16 Feb 2021 15:56:39 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/thread2/</guid>
      
        <description>&lt;h3 id=&#34;解决线程安全问题-lock锁&#34;&gt;解决线程安全问题： Lock锁&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;  &lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread25.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread Lock&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;lock锁-和synchronized区别&#34;&gt;Lock锁 和synchronized区别？&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;相同&lt;/strong&gt;&lt;/em&gt;： 都可以解决线程安全问题&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不同&lt;/strong&gt;&lt;/em&gt; synchronized机制在执行完相应的同步代码以后，自动释放同步监视器， Lock需要
手动的启动同步（Lock（））， 结束时也需要手动结束（unlock（））&lt;/p&gt;
&lt;h4 id=&#34;优先使用顺序&#34;&gt;优先使用顺序：&lt;/h4&gt;
&lt;p&gt;Lock  同步代码块（已经进入了方法体，分配了相应资源）  同步方法
（在方法体之外）&lt;/p&gt;
&lt;h3 id=&#34;解决线程安全问题有几种&#34;&gt;解决线程安全问题有几种？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Lock&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;synchronized（代码块和方法）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;练习&#34;&gt;练习：&lt;/h4&gt;
&lt;p&gt;代码：
银行有一个账户，有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;明确哪些代码是多线程? 是， 两个储蓄线程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;是否有共享数据？ 有， 账户余额&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.是否有线程安全问题？ 有。有共享数据， 有两个线程都对它操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;如何解决线程安全问题？ 同步机制： 3种&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread25.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread synchronized&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;线程的通信&#34;&gt;线程的通信&lt;/h3&gt;
&lt;h4 id=&#34;使用两个线程打印-1-100线程1-线程2-交替打印&#34;&gt;使用两个线程打印 1-100。线程1, 线程2 交替打印:&lt;/h4&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread26.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread commnucation&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;涉及到3个方法：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wait():线程进入阻塞，并释放同步监视器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notify()&amp;ldquo;就会环形被wait的一个线程，如果有多个，就唤醒优先级高的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notifyAll():
*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明： 这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这三个方法的调用者必须是同步代码块或者同步方法中的同步监视器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;这三个方法是定义在object类下面的，不是Thread类下面的&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread27.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread commnucation&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-面试题-sleep和wait异同&#34;&gt;* 面试题： sleep()和wait()异同？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;共同点： 一旦执行，都可以使得当前线程进入阻塞&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不同点： 1. 两个方法声明的位置不同： Thread类中声明sleep(), Object类中申明wait()&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不同点： 2. 调用要求不同： sleep()可以在任何需要的场景下调用, wait()必须在同步代码块或者同步方法&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不同点： 3. 释放同步监视器的问题： 如果两个方法都用在同步代码块或者同步方法中，sleep()不会释放释放同步监视器, wait()会释放释放同步监视器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;练习经典例题生产者消费者问题&#34;&gt;练习：经典例题：生产者/消费者问题&lt;/h4&gt;
&lt;p&gt;生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处
取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图
生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通
知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如
果店中有产品了再通知消费者来取走产品。&lt;/p&gt;
&lt;p&gt;这里可能出现两个问题：&lt;/p&gt;
&lt;p&gt;生产者比消费者快时，消费者会漏掉一些数据没有取到。&lt;/p&gt;
&lt;p&gt;消费者比生产者快时，消费者会取相同的数据。&lt;/p&gt;
&lt;h3 id=&#34;创造多线程的第三种方式实现callable接口&#34;&gt;创造多线程的第三种方式：实现Callable接口&lt;/h3&gt;
&lt;p&gt;与使用Runnable相比， Callable功能更强大些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比run()方法，可以有返回值&lt;/li&gt;
&lt;li&gt;方法可以抛出异常&lt;/li&gt;
&lt;li&gt;支持泛型的返回值&lt;/li&gt;
&lt;li&gt;需要借助FutureTask类，比如获取返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤： 1， 2， 3.创建callable接口实现类的对象&lt;/p&gt;
&lt;p&gt;4.将此Callable接口实现类的对象作为传递到FutureTask构造器中&lt;/p&gt;
&lt;p&gt;5.将FutureTask对象作为参数传到Thread类的构造器中，创建Thread对象，并启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread28.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread Callable&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;创造多线程的第四种方式线程池&#34;&gt;创造多线程的第四种方式：线程池&lt;/h3&gt;
&lt;p&gt;提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提高响应速度（减少了创建新线程的时间）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降低资源消耗（重复利用线程池中线程，不需要每次都创建）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便于线程管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;corePoolSize：核心池的大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maximumPoolSize：最大线程数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keepAliveTime：线程没有任务时最多保持多长时间后会终止&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://rileyshen.github.io/images/thread29.png&#34;
         alt=&#34;image&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;thread poll&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;ok-its-time-for-stringhahahugoshortcode-s6-hbhb&#34;&gt;Ok, It&amp;rsquo;s time for &lt;a href=&#34;https://rileyshen.github.io/post/string/&#34; &gt;String&lt;/a&gt;&lt;/h4&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://rileyshen.github.io/post/thread/&#34; &gt;Thread1&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>hashCode() and equals() → Complex numbers</title>
      <link>https://rileyshen.github.io/post/hashcode/</link>
      <pubDate>Mon, 16 Sep 2019 16:56:43 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/hashcode/</guid>
      
        <description>&lt;p&gt;Here&amp;rsquo;s a class ComplexNumber. You need to override its methods equals() and hashCode(). The method equals() should compare two instances of ComplexNumber by the fields re and im. The method hashCode() must be consistent with your implementation of equals().&lt;/p&gt;
&lt;p&gt;Implementations of the method hashCode() that return a constant or do not consider a fractional part of re and im, will not be accepted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// a.equals(b) must return true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a.hashCode() must be equal to b.hashCode()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ComplexNumber&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ComplexNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;im&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getRe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getIm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ComplexNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;that&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;that&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>