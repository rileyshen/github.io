<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Facade Pattern on Website of Riley</title>
    <link>https://rileyshen.github.io/tags/facade-pattern/</link>
    <description>Recent content in Facade Pattern on Website of Riley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 15:23:47 +0800</lastBuildDate><atom:link href="https://rileyshen.github.io/tags/facade-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Facade Pattern, Flyweight Pattern and Proxy Pattern</title>
      <link>https://rileyshen.github.io/post/designpattern4/</link>
      <pubDate>Sun, 10 Apr 2022 15:23:47 +0800</pubDate>
      
      <guid>https://rileyshen.github.io/post/designpattern4/</guid>
      
        <description>&lt;h3 id=&#34;1-facade&#34;&gt;1. Facade&lt;/h3&gt;
&lt;p&gt;外观类为包含许多活动部件的复杂子系统提供一个简单的接口。 与直接调用子系统相比， 外观提供的功能可能比较有限， 但它却包含了客户端真正关心的功能。&lt;/p&gt;
&lt;p&gt;如果你的程序需要与包含几十种功能的复杂库整合， 但只需使用其中非常少的功能， 那么使用外观模式会非常方便.
&lt;br&gt;
如果你需要一个指向复杂子系统的直接接口， 且该接口的功能有限， 则可以使用外观模式。&lt;/p&gt;
&lt;p&gt;如果要充分发挥这一模式的优势， 你必须确保所有客户端代码仅通过外观来与子系统进行交互。 此后客户端代码将不会受到任何由子系统代码修改而造成的影响， 比如子系统升级后， 你只需修改外观中的代码即可。&lt;/p&gt;
&lt;p&gt;外观模式为现有对象定义了一个新接口， 适配器模式则会试图运用已有的接口。 适配器通常只封装一个对象， 外观通常会作用于整个对象子系统上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain
&lt;ul&gt;
&lt;li&gt;UserInfo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;web
&lt;ul&gt;
&lt;li&gt;Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- // 这⾥提供了⼀个基本的查询服务，通过⼊参 userId ，查询⽤户信息。后续就需要在这⾥扩展⽩名
单，只有指定⽤户才可以查询，其他⽤户不能查询。 --&gt;
&lt;!-- 然后在这里方面里面用userlist加入好几个用户名，说不是此用户名就不行，但是后面白名单要改，会带来非常多问题 --&gt;
&lt;ul&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码重构后&lt;/p&gt;
&lt;p&gt;外观 （Facade） 提供了一种访问特定子系统功能的便捷方式， 其了解如何重定向客户端请求， 知晓如何操作一切活动部件。&lt;/p&gt;
&lt;p&gt;创建附加外观 （Additional Facade） 类可以避免多种不相关的功能污染单一外观， 使其变成又一个复杂结构。 客户端和其他外观都可使用附加外观。&lt;/p&gt;
&lt;p&gt;复杂子系统 （Complex Subsystem） 由数十个不同对象构成。 如果要用这些对象完成有意义的工作， 你必须深入了解子系统的实现细节， 比如按照正确顺序初始化对象和为其提供正确格式的数据。&lt;/p&gt;
&lt;p&gt;子系统类不会意识到外观的存在， 它们在系统内运作并且相互之间可直接进行交互。&lt;/p&gt;
&lt;p&gt;客户端 （Client） 使用外观代替对子系统对象的直接调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@interface DoDoor {
String key() default &amp;ldquo;&amp;quot;;
String returnJson() default &amp;ldquo;&amp;quot;;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DoJoinPoint&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 具体如何从一坨复杂子系统中提供要的信息 --&gt;
&lt;p&gt;庞大子系统，这里是复杂配置服务类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;StarterService&lt;/li&gt;
&lt;li&gt;StarterServiceProperties&lt;/li&gt;
&lt;li&gt;StarterAutoConfigure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-flyweight&#34;&gt;2. Flyweight&lt;/h3&gt;
&lt;p&gt;享元模式建议不在对象中存储外在状态， 而是将其传递给依赖于它的一个特殊方法。 程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态 （与外在状态相比， 内在状态的变体要少很多）， 因此你所需的对象数量会大大削减。&lt;/p&gt;
&lt;p&gt;将这样一个仅存储内在状态的对象称为享元.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ActivityController&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 也就是从数据库中获取所有的商品信息和库存。有点像
最开始写的商品销售系统，数据库就可以抗住购物量。
当后续因为业务的发展需要扩展代码将库存部分交给redis处理，那么就需要从redis中获取活动的
库存，⽽不是从库中，否则将造成数据不统⼀的问题 --&gt;
&lt;p&gt;代码重构后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;util
&lt;ul&gt;
&lt;li&gt;RedisUtils.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity.java&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  的对象类⽐较简单，只是⼀个活动的基础信息；id、名称、描述、时间和库存--&gt;
&lt;ul&gt;
&lt;li&gt;ActivityController.java&lt;/li&gt;
&lt;li&gt;ActivityFactory.java&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 这⾥提供的是⼀个享元⼯⼚
*
，通过 map 结构存放已经从库表或者接⼝中查询到的数据，存放到
内存中，⽤于下次可以直接获取 --&gt;
&lt;ul&gt;
&lt;li&gt;Stock.java&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 的对象类⽐较简单，只是⼀个活动的基础信息；id、名称、描述、时间和库存 --&gt;
&lt;p&gt;再看剩余几个类的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;util&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RedisUtils.java
&lt;ul&gt;
&lt;li&gt;AtomicInteger stock&lt;/li&gt;
&lt;li&gt;ScheduledExecutorService&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;!-- 处理模拟 redis 的操作⼯具类外，还提供了⼀个定时任务⽤于模拟库存的使⽤ --&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ActivityController.java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity activity = ActivityFactory.getActivity(id);&lt;/li&gt;
&lt;/ul&gt;
  &lt;!--  模拟从Redis中获取库存变化信息 --&gt;
&lt;ul&gt;
&lt;li&gt;Stock stock = new Stock(1000, redisUtils.getStockUsed());&lt;/li&gt;
&lt;li&gt;activity.setStock(stock);&lt;/li&gt;
&lt;li&gt;return activity;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 在活动控制类中使⽤了享元⼯⼚获取活动信息，查询后将库存信息在补充上。因为库存信息是变化
的，⽽活动信息是固定不变的。 --&gt;
&lt;h3 id=&#34;3-proxy&#34;&gt;3. Proxy&lt;/h3&gt;
&lt;p&gt;外观模式与代理的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 代理与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与外观不同&lt;/p&gt;
&lt;p&gt;用spring代理mybatis&lt;/p&gt;
&lt;p&gt;服务接口 （Service Interface） 声明了服务接口。 代理必须遵循该接口才能伪装成服务对象。&lt;/p&gt;
&lt;p&gt;服务 （Service） 类提供了一些实用的业务逻辑。&lt;/p&gt;
&lt;p&gt;代理 （Proxy） 类包含一个指向服务对象的引用成员变量。 代理完成其任务 （例如延迟初始化、 记录日志、 访问控制和缓存等） 后会将请求传递给服务对象。&lt;/p&gt;
&lt;p&gt;通常情况下， 代理会对其服务对象的整个生命周期进行管理。&lt;/p&gt;
&lt;p&gt;客户端 （Client） 能通过同一接口与服务或代理进行交互， 所以你可在一切需要服务对象的代码中使用代理。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>